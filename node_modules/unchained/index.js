module.exports = function (root, rootdir) {

    // Require all modules in a directory
    var requireDir = function (dir, modules) {
        // Returns empty Object if nothing found
        if (typeof modules === 'undefined') modules = {};
        if (fs.existsSync(dir)) {
            fs.readdirSync(dir).filter(function (file) {
                return (file.indexOf('.js') > 0) && (file !== 'index.js');
            }).forEach(function (file) {
                modules[file.replace('.js', '')] = root.require(path.join(dir + file));
            });
        }
        return modules;
    };

    // Dependencies
    express = require('express');
    swig = require('swig');
    http = require('http');
    path = require('path');
    fs = require('fs');

    // Modules
    model = (fs.existsSync(rootdir + '/models/index.js')
        || fs.existsSync(rootdir + '/models.js')) ? root.require('./models') : {};
    model = requireDir(rootdir + '/models/', model);

    m = (fs.existsSync(rootdir + '/middleware/index.js')
        || fs.existsSync(rootdir + '/middleware.js')) ? root.require('./middleware') : {};
    m = requireDir(rootdir + '/middleware/', m);

    view = (fs.existsSync(rootdir + '/views/index.js')
        || fs.existsSync(rootdir + '/views.js')) ? root.require('./views') : {};
    view = requireDir(rootdir + '/views/', view);

    // Express setup
    var app = root.require('./config')(
        express()
        .set('root_dir', rootdir)
        .set('default_method', 'all')
        .set('listen_port', 8080)
    ), def_meth = app.get('default_method').toLowerCase();

    // Route mapping
    var map = root.require('./urls');

    // Map views to Express
    for (var url in map) {
        if (typeof map[url] === 'function') {
            app[def_meth](url, map[url]);
        } else if (map[url] instanceof Array) {
            var stack = map[url], last = stack.pop();
            if (typeof last !== 'function'
                && !(last instanceof Array)
                && typeof last === 'object') {
                for (var meth in last) {
                    var method = last[meth];
                    if (method instanceof Array) {
                        var method = last[meth].pop();
                        app[meth.toLowerCase()](url, stack.concat(last[meth]), method);
                    } else if (typeof method === 'function') {
                         app[meth.toLowerCase()](url, stack, method);
                    }
                }
            } else if (last instanceof Array) {
                var nested = last.pop();
                if (typeof nested === 'function') app[def_meth](url, stack.concat(last), nested);
            } else if (typeof last === 'function') {
                app[def_meth](url, stack, last);
            }
        } else if (typeof map[url] === 'object') {
            for (var meth in map[url]) {
                var method = map[url][meth];
                if (method instanceof Array) {
                    var method = map[url][meth].pop();
                    app[meth.toLowerCase()](url, map[url][meth], method);
                } else if (typeof method === 'function') {
                     app[meth.toLowerCase()](url, method);
                }
            }
        }
    }

    // Start listening
    server = http.createServer(app).listen(app.get('listen_port'));
    return app;
};
